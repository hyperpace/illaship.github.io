<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>[Alogrithm_004]비트연산</title>
      <link href="/2018/03/29/algorithm/%5BAlogrithm_004%5D%EB%B9%84%ED%8A%B8%EC%97%B0%EC%82%B0/"/>
      <content type="html"><![CDATA[<h1>비트 소개</h1><ul><li>컴퓨터에서 사용할 수 있는 최소 단위다.</li><li>2진수를 저장하는 단위로 0과 1을 나타낼 수 있다.</li><li>8bit == 1byte</li></ul><h1>비트 연산자</h1><table><thead><tr><th>연산자</th><th>설명</th></tr></thead><tbody><tr><td>&amp;</td><td>비트 AND</td></tr><tr><td>|</td><td>비트 OR</td></tr><tr><td>^</td><td>비트 XOR</td></tr><tr><td>~</td><td>비트 NOT</td></tr><tr><td>&lt;&lt;</td><td>왼쪽으로 시프트</td></tr><tr><td>&gt;&gt;</td><td>오른쪽으로 시프트</td></tr></tbody></table><a id="more"></a><br><h2>AND 연산자(<code>&amp;</code>)</h2><ul><li>두 비트의 값이 모두 1일 때 1이다.</li><li>즉, 두 비트의 값중 하나만 0이라도 0이다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0001</span> <span class="number">0001</span> &amp; <span class="number">0000</span> <span class="number">0101</span> = <span class="number">0000</span> <span class="number">0001</span></span><br></pre></td></tr></table></figure><br><h2>OR 연산자(<code>|</code>)</h2><ul><li>두 비트의 값중 하나만 1이라도 1이다.</li><li>즉, 비트0은 영향력이 없다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0001</span> <span class="number">0001</span> | <span class="number">0000</span> <span class="number">0101</span> = <span class="number">0001</span> <span class="number">0101</span></span><br></pre></td></tr></table></figure><br><h2>XOR 연산자(<code>^</code>)</h2><ul><li>두 비트의 값이 서로 다를 때 1이다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0001</span> <span class="number">0001</span> ^ <span class="number">0000</span> <span class="number">0101</span> = <span class="number">0001</span> <span class="number">0100</span></span><br></pre></td></tr></table></figure><br><h2>NOT 연산자(<code>~</code>)</h2><ul><li>비트 0은 1로, 비트 1은 0으로 바꾸며 &quot;비트를 뒤집는다&quot;고 한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="number">0001</span> <span class="number">0001</span> = <span class="number">1110</span> <span class="number">1110</span></span><br><span class="line">~ <span class="number">0000</span> <span class="number">0101</span> = <span class="number">1111</span> <span class="number">1010</span></span><br></pre></td></tr></table></figure><br><h2>SHIFT 연산자(<code>&lt;&lt;</code>, <code>&gt;&gt;</code>)</h2><ul><li><code>&lt;&lt;</code> 비트의 값을 왼쪽으로 이동. 즉, 우측n개의 비트를 0으로 만든다.</li><li><code>&gt;&gt;</code> 비트의 값을 오른쪽으로 이동. 즉, 좌측n개의 비트를 0으로 만든다.</li><li><code>&lt;&lt;</code> 의 1번 이동은 <code>*2</code></li><li><code>&gt;&gt;</code> 의 1번 이동은 <code>/2</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0001</span> <span class="number">0001</span> &lt;&lt; <span class="number">3</span> = <span class="number">1000</span> <span class="number">1000</span>  <span class="comment">// 왼쪽으로 3번 이동(17*2*2*2 = 17*2^3)</span></span><br><span class="line"><span class="number">0001</span> <span class="number">0001</span> &lt;&lt; <span class="number">1</span> = <span class="number">0010</span> <span class="number">0010</span>  <span class="comment">// 왼쪽으로 1번 이동(17*2 = 17*2^1)</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0101</span> &gt;&gt; <span class="number">2</span> = <span class="number">0000</span> <span class="number">0001</span>  <span class="comment">// 오른쪽5으로 2번 이동(5/2/2 = 1)</span></span><br></pre></td></tr></table></figure><br>]]></content>
      
      <categories>
          
          <category> basics </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Java_001]Java Decompiler</title>
      <link href="/2018/03/16/java/%5BJava_001%5DJava%20Decompiler/"/>
      <content type="html"><![CDATA[<h1>Java Decompiler 소개</h1><blockquote><h2>Decompiler란?</h2></blockquote><ul><li>역컴파일러(영어: Decompiler)는 컴파일러와 반대의 역할을 하는 컴퓨터 프로그램이다.</li><li>즉, 이것은 상대적으로 저수준의 추상에 있는 프로그램의 코드를 고수준의 추상으로 변형한다.</li><li>역컴파일러는 보통 원본 소스코드로 완벽하게 재구성될 수 없으며, 결과가 매우 다양할 수 있다.</li><li>그럼에도 불구하고 이것은 소프트웨어 리버스 엔지니어링에서 매우 중요한 도구이다.</li><li>역컴파일러는 실행 파일을 입력으로 갖고, 같은 기능을 하는 소스 코드 파일 즉, 고급 언어로 만든다.</li></ul><p>출처 : <em>위키백과</em> (<a href="https://ko.wikipedia.org/wiki/%EC%97%AD%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/역컴파일러</a>)</p><a id="more"></a><blockquote><h2>쉽게 말하면 …</h2></blockquote><ul><li><code>Java 컴파일</code>은 <code>.java</code>파일을 <code>.class</code>실행파일로 변환해준다.</li><li><code>.class</code>실행파일 소스가 궁금할 때, <code>.java</code>파일로 변환해주는 것을 <code>Java Decompiler</code>라고 한다.</li><li><code>라이브러리의 소스</code>가 궁금할 때, 유용하다.</li></ul><br># Java Decompiler 다운로드 및 설치1. 이클립스와 Java설치 방법은 생략한다. 2. 이클립스를 실행한다.3. 이클립스 상단Tap에서 `Help > Eclipse Marketplace..`를 클릭한다.4. 그리고 `Find`입력 폼에 `Decompiler`를 입력 후 검색한다.5. 우리가 설치하려고 하는 것은 `Enhanced Class Decompiler x.x.x`이다. `install 버튼`을 클릭해서 설치한다.6. 설치가 마무리 되면, `Restart Now`를 클릭한다.(아니면, `직접 Eclipse를 Restart`를 한다.)<br># Java Decompiler 설정1. 이클립스 상단Tap 에서 `Window > Preferences`를 클릭한다.2. 그 다음, `Preferences`창에서 `General > Editors > File Associations` 를 클릭한다.3. `File types:` 에서 `*.class`, `*.class without source`를 각각 클릭하여, 아래 `Associated editors:`에 있는 `Class Decompiler Viewer`를 클릭 후, `Default버튼`을 클릭하고 `Apply`후 닫는다.]]></content>
      
      <categories>
          
          <category> lang </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Alogrithm_003]괄호</title>
      <link href="/2018/03/12/algorithm/%5BAlogrithm_003%5D%EA%B4%84%ED%98%B8/"/>
      <content type="html"><![CDATA[<h1>문제</h1><ul><li>괄호 문자열(Parenthesis String, PS)은 두 개의 괄호 기호인 ‘(’ 와 ‘)’ 만으로 구성되어 있는 문자열이다.</li><li>괄호의 모양이 바르게 구성된 문자열을 올바른 괄호 문자열(Valid PS, VPS)이라고 부른다.</li><li>여러분은 입력으로 주어진 괄호 문자열이 VPS 인지 아닌지를 판단해서 그 결과를 YES 와 NO 로 나타내어야 한다.</li></ul><h1>입력</h1><ul><li>입력은 T개의 테스트 데이터로 주어진다.</li><li>입력의 첫 번째 줄에는 입력 데이터의 수를 나타내는 정수 T가 주어진다.</li><li>각 테스트 데이터의 첫째 줄에는 괄호 문자열이 한 줄에 주어진다.</li><li>하나의 괄호 문자열의 길이는 2 이상 50 이하이다.</li></ul><h1>출력</h1><ul><li>만일 입력 괄호 문자열이 올바른 괄호 문자열(VPS)이면 “YES”, 아니면 “NO”를 한 줄에 하나씩 차례대로 출력해야 한다.</li></ul><h1>출처</h1><ul><li><em>백준온라인저지-9012번-괄호</em> (<a href="https://www.acmicpc.net/problem/9012" target="_blank" rel="noopener">https://www.acmicpc.net/problem/9012</a>)</li></ul><a id="more"></a><h1>풀이</h1><blockquote><h2>방법 - 스택(Stack) 이용</h2></blockquote><ol><li>__스택의 마지막에 넣은것이 가장 먼저 나오는 구조__를 이용한다.</li><li>입력받은 __문자열의 길이 만큼 Loop__를 돈다.<ul><li>문자 __<code>(</code>__를 발견하면 <strong>스택(Stack)에 <code>push()</code></strong></li><li>문자 __<code>)</code>__를 발견하면 <strong>스택(Stack)에서 <code>pop()</code></strong></li><li>만약, Loop동안 __스택의 길이가 0보다 작아__지려 한다면 <code>NO</code></li></ul></li><li>Loop가 끝난 뒤, __스택의 길이가 0__이면 <code>YES</code></li><li>Loop가 끝난 뒤, <strong>스택의 길이가 0보다 크면</strong> <code>NO</code></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">isVps</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = str.at(i);</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'('</span>) &#123;</span><br><span class="line">            st.push(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(st.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"NO"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(st.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"YES"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"NO"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">            </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; isVps(str) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> basics </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[DataStructure_003]덱(Deque)</title>
      <link href="/2018/03/12/datastructure/%5BDataStructure_003%5D%EB%8D%B1(Deque)/"/>
      <content type="html"><![CDATA[<p><img src="/images/dataStr/Deque.png" alt="Deque"></p><h1>덱 소개</h1><ul><li>양 끝에서 자료를 삽입과 삭제를 할 수 있는 자료구조입니다.</li><li>큐와 다르게 양 끝에서 삽입과 삭제가 가능하므로 Double-ended queue라고 부릅니다.</li></ul><a id="more"></a><h1>덱 연산</h1><table><thead><tr><th>함수</th><th>설명</th></tr></thead><tbody><tr><td>push_front</td><td>덱의 앞에 자료를 삽입하는 연산.</td></tr><tr><td>push_back</td><td>덱의 뒤에 자료를 삽입하는 연산.</td></tr><tr><td>pop_front</td><td>덱의 앞에서 자료를 삭제하는 연산.</td></tr><tr><td>pop_back</td><td>덱의 뒤에서 자료를 삭제하는 연산.</td></tr><tr><td>front</td><td>덱의 가장 앞에 있는 자료를 보는 연산.</td></tr><tr><td>back</td><td>덱의 가장 뒤에 있는 자료를 보는 연산.</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> basics </category>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[DataStructure_002]큐(Queue)</title>
      <link href="/2018/03/12/datastructure/%5BDataStructure_002%5D%ED%81%90(Queue)/"/>
      <content type="html"><![CDATA[<p><img src="/images/dataStr/Queue.png" alt="Queue"></p><h1>큐 소개</h1><ul><li>한쪽 끝에서만 자료를 삽입하고 반대 쪽 끝에서만 삭제할 수 있는 자료구조입니다.</li><li>먼저 넣은 것이 가장 먼저 나오기 때문에 First In First Out(FIFO)라고도 부릅니다.</li></ul><a id="more"></a><h1>큐 연산</h1><table><thead><tr><th>함수</th><th>설명</th></tr></thead><tbody><tr><td>push</td><td>큐에 자료를 삽입하는 연산.</td></tr><tr><td>pop</td><td>큐에서 자료를 삭제하는 연산</td></tr><tr><td>front</td><td>큐의 가장 앞(가장 먼저 삽입)에 있는 자료를 보는 연산.</td></tr><tr><td>back</td><td>큐에서 가장 뒤(가장 나중에 삽입)에 있는 자료를 보는 연산.</td></tr><tr><td>empty</td><td>큐가 비어 있는지 아닌지 보는 연산.</td></tr><tr><td>size</td><td>큐에 저장되어있는 자료의 개수를 보는 연산.</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> basics </category>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[DataStructure_001]스택(Stack)</title>
      <link href="/2018/03/12/datastructure/%5BDataStructure_001%5D%EC%8A%A4%ED%83%9D(Stack)/"/>
      <content type="html"><![CDATA[<p><img src="/images/dataStr/stack.png" alt="Stack"></p><h1>스택 소개</h1><ul><li>한쪽 끝에서만 자료를 삽입, 삭제할 수 있는 자료구조입니다.</li><li>마지막에 넣은것이 가장 먼저 나오기 때문에, Last in First Out(LIFO)라고도 부릅니다.</li></ul><a id="more"></a><h1>스택 연산</h1><table><thead><tr><th>함수</th><th>설명</th></tr></thead><tbody><tr><td>push</td><td>스택에 자료를 삽입하는 연산</td></tr><tr><td>pop</td><td>스택에서 자료를 삭제하는 연산</td></tr><tr><td>top</td><td>스택의 가장 위에 있는 자료를 보는 연산.</td></tr><tr><td>empty</td><td>스택이 비어 있는지 아닌지를 알아보는 연산.</td></tr><tr><td>size</td><td>스택에 저장되어있는 자료의 개수를 알아보는 연산.</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> basics </category>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Algorithm_002]그대로 출력하기</title>
      <link href="/2018/03/12/algorithm/%5BAlgorithm_002%5D%EA%B7%B8%EB%8C%80%EB%A1%9C%20%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/"/>
      <content type="html"><![CDATA[<h1>문제</h1><ul><li>입력 받은 대로 출력하는 프로그램을 작성하시오.</li></ul><h1>입력</h1><ul><li>알파벳 소문자, 대문자, 공백, 숫자로만 이루어져 있다.</li><li>각 줄은 100글자를 넘지 않으며, 빈 줄이 주어질 수도 있고, 각 줄의 앞 뒤에 공백이 있을 수도 있다.</li></ul><h1>출력</h1><ul><li>입력받은 그대로 출력한다.</li></ul><h1>출처</h1><ul><li><em>백준온라인저지-11719번-그대로출력하기2</em> (<a href="https://www.acmicpc.net/problem/11719" target="_blank" rel="noopener">https://www.acmicpc.net/problem/11719</a>)</li></ul><a id="more"></a><h1>풀이</h1><blockquote><h2>방법1 - getchar() 이용</h2></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) &amp;&amp; c != EOF) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2>방법2 - getline() 이용</h2></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, str)) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>주의사항</h1><ul><li><code>scanf(&quot;%s&quot;,s);</code>, <code>cin &gt;&gt; s;</code>은 __빈칸으로 시작__하거나 __빈칸이 포함__되는 온전한 한줄을 입력받지 못한다.</li><li><code>fgets(s, 100, stdin);</code>는 <strong>줄바꿈까지 입력받기</strong> 때문에, 주의한다.</li><li><code>scanf(&quot;%[^\n]\n&quot;, s);</code>는 <strong>줄바꿈을 입력받지 않기</strong> 때문에 좋지만, __각 줄의 앞 뒤에 있는 공백은 무시하고 입력__을 받는다.즉, <strong>빈줄을 받을 수 없고, 공백으로 시작하는 줄을 받을 수 없다.</strong></li></ul>]]></content>
      
      <categories>
          
          <category> basics </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Algorithm_001]알고리즘 소개</title>
      <link href="/2018/03/12/algorithm/%5BAlgorithm_001%5D%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%20%EC%86%8C%EA%B0%9C/"/>
      <content type="html"><![CDATA[<h1>알고리즘 소개</h1><ul><li><strong>어떠한 문제를 해결하기위한 여러 동작들의 모임입니다.</strong></li></ul><a id="more"></a><h1>시간복잡도(O) 개념</h1><ul><li><strong>시간복잡도는 입력의 크기에 대해서 최악의 경우 시간이 얼마나 걸릴지 나타내는 방법입니다.</strong></li></ul><blockquote><h2>대표적인 시간 복잡도</h2></blockquote><table><thead><tr><th style="text-align:left">시간복잡도</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:left"><strong>Ο(1)</strong></td><td style="text-align:left">단순계산을 할 경우 ex) 배열에 접근하는 연산, a/b와 같은 연산.</td></tr><tr><td style="text-align:left"><strong>Ο(logN)</strong></td><td style="text-align:left">N개를 절반으로 계속 나눌경우</td></tr><tr><td style="text-align:left"><strong>Ο(N)</strong></td><td style="text-align:left">중복되지 않은 for문일 경우</td></tr><tr><td style="text-align:left"><strong>O(NlogN)</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>Ο(N^2)</strong></td><td style="text-align:left">2중 for문일 경우</td></tr><tr><td style="text-align:left"><strong>Ο(N^3)</strong></td><td style="text-align:left">3중 for문일 경우</td></tr><tr><td style="text-align:left"><strong>Ο(2^N)</strong></td><td style="text-align:left">크기가 N인 집합의 부분집합</td></tr><tr><td style="text-align:left"><strong>Ο(N!)</strong></td><td style="text-align:left">크기가 N인 순열</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> basics </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Hexo_03]테마설정</title>
      <link href="/2018/03/12/hexo/%5BHexo_03%5D%ED%85%8C%EB%A7%88%EC%84%A4%EC%A0%95/"/>
      <content type="html"><![CDATA[<h1>Hexo테마 설정</h1><ul><li><strong>Hexo는 다양한 테마를 지원한다.</strong></li><li><strong>테마마다 설정방법이 조금씩 다르다.</strong></li></ul><a id="more"></a><h1>공통적인 테마 설정 방법</h1><ul><li><strong>테마마다 설정방법이 조금씩 다르지만, 기본적인 설정방법은 같다.</strong></li></ul><ol><li><strong>github를 이용하여 테마를 다운받는다</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git <span class="built_in">clone</span> &lt;hexo-theme의 github주소&gt; &lt;./themes/테마명&gt;</span><br><span class="line">&gt; git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next.git ./themes/next</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>테마는 ./theme/ 경로에 위치한다.</strong></li><li><strong>테마는 아래의 구조를 가진다.</strong></li></ol><pre>.├── _config.yml     # 테마 설정 파일├── languages       # 테마 언어폴더(ko.yml)├── layout          # 사이트를 어떻게 보여줄지 정의한 폴더(.ejs/.swing)├── scripts         # javascript모음 폴더└── source          # 실제 ./public 폴더에 위치할 파일 모음</pre><ol start="4"><li><strong>마음에 드는 테마의 Docs를 꼭 확인해서 설정한다</strong></li><li><strong>블로그 글을 작성한 뒤, <code>hexo d -g</code>명령어를 사용하여 githube에 <code>push</code>한다.</strong></li><li><strong><code>사용자이름.github.io</code> 주소로 접속해서 잘 배포되었는지 확인한다.(늦게 반영되는 경우도 있다.)</strong></li></ol>]]></content>
      
      <categories>
          
          <category> git </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Hexo_02]마크다운(markdown)</title>
      <link href="/2018/03/12/hexo/%5BHexo_02%5D%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"/>
      <content type="html"><![CDATA[<h1>마크다운(markdown) 소개</h1><ul><li><strong>마크다운(markdown)은 일반 텍스트 문서의 양식을 편집하는 문법이다.</strong></li><li><strong>마크다운을 이용해 작성된 문서는 쉽게 HTML 등 다른 문서형태로 변환이 가능하다.</strong></li></ul><a id="more"></a><h1>마크다운 작성법</h1><blockquote><h2>제목</h2></blockquote><pre># 제목1## 제목2### 제목3#### 제목4##### 제목5###### 제목6</pre><pre>큰 제목====================중간 제목---------------------</pre><blockquote><h2>인용</h2></blockquote><pre>> 인용1>> 인용1-1> 인용2</pre><blockquote><h2>이탤릭체</h2></blockquote><pre>*이탤릭체*_이탤릭체_</pre><blockquote><h2>볼드체</h2></blockquote><pre>**볼드체**__볼드체__</pre><blockquote><h2>링크</h2></blockquote><pre>[링크명](http://www.example.com)[링크명](http://www.example.com "사이트 제목")</pre><blockquote><h2>순서있는 리스트</h2></blockquote><pre>1. 첫 번째2. 두 번째3. 세 번째</pre><blockquote><h2>순서없는 리스트</h2></blockquote><pre>- 첫 번째    - 첫번째 -1+ 두 번째* 세 번째</pre><blockquote><h2>이미지</h2></blockquote><pre>![이미지명](이미지 경로)</pre>]]></content>
      
      <categories>
          
          <category> git </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Hexo_01]소개 및 시작하기</title>
      <link href="/2018/03/11/hexo/%5BHexo_01%5D%EC%86%8C%EA%B0%9C%20%EB%B0%8F%20%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"/>
      <content type="html"><![CDATA[<h1>Hexo 소개</h1><ul><li><strong><a href="https://hexo.io/ko/index.html" target="_blank" rel="noopener">Hexo</a>는 빠르고 간단하고 강력한 블로그 프레임워크입니다.</strong></li><li><strong>기본적인 <code>git</code>, <code>html</code>, <code>css</code>, <code>javaScript</code> 지식이 필요합니다.</strong></li></ul><a id="more"></a><h1>Hexo 설치 전 준비하기</h1><ul><li><strong>Hexo를 사용하기 위해 몇가지 준비사항이 있습니다.</strong></li></ul><blockquote><h2><strong>Node.js 설치</strong></h2></blockquote><ol><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 로 접속힌다.</li><li><code>Node.js LTS버전</code>을 다운 받는다.</li><li>다운받은 <code>Node.js LTS버전</code>을 설치한다.</li><li><code>crtl+r</code>키를 누른 뒤 <code>cmd</code>를 실행시킵니다.</li><li>정상적인 설치확인을 위해 <code>node버전</code>과 <code>npm버전</code>을 확인합니다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">&gt; npm -v</span><br></pre></td></tr></table></figure><blockquote><h2><strong>github Repository 생성</strong></h2></blockquote><ol><li><a href="https://github.com/" target="_blank" rel="noopener">github</a>계정이 없다면, 가입합니다.</li><li><a href="https://github.com/" target="_blank" rel="noopener">github</a>에서 <code>New repository</code>를 클릭합니다.</li><li><code>Repository name</code>에 <code>사용자이름.github.io</code>를 입력합니다.</li><li>다른 설정은 그대로 둔 뒤, <code>Create repository</code>를 클릭합니다.</li></ol><h1>Hexo 설치</h1><p><strong>본격적으로 Hexo를 설치합니다</strong></p><ol><li><code>crtl+r</code>키를 누른 뒤 <code>cmd</code>를 실행시킵니다.</li><li><code>Node.js</code>를 실행시킵니다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; node</span><br></pre></td></tr></table></figure><ol start="3"><li><code>npm</code>을 이용하여 <code>hexo-cli</code>를 설치합니다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ol start="4"><li>적당한 위치에 <code>원하는명(myblog)</code>을 가진 폴더를 만듭니다.</li><li><code>cd</code>명령어를 이용하여, 만든폴더의 위치로 이동합니다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo init</span><br><span class="line">&gt; npm install</span><br></pre></td></tr></table></figure><ol start="6"><li>현재(<code>root</code>)디렉토리에 있는<code>_config.yml</code>이라는 설정파일을 이용해 블로그의 대부분 설정을 할 수 있습니다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">title: #블로그의 제목</span><br><span class="line">subtitle: #블로그의 부제목</span><br><span class="line">description: #블로그의 설명</span><br><span class="line">author: #블로그의 소유자</span><br><span class="line">language: ko #블로그의 언어 설정 </span><br><span class="line">timezone: Asia/Seoul #블로그의 시간 설정</span><br><span class="line"></span><br><span class="line">url: https://사용자 이름.github.io #블로그의 주소</span><br><span class="line"></span><br><span class="line">theme: #블로그의 테마 false이면 테마를 끕니다.</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/사용자이름/사용자이름.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><pre><code>_config.yml 설정방법_ (https://hexo.io/ko/docs/configuration.html)</code></pre><h1>블로그 글 작성하기</h1><ol><li><code>hexo new [layout] &lt;title&gt;</code>명령어를 이용하여 새 글 작성을 위한 파일 만들기.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo new &quot;첫글&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>/source/_posts/첫글.md</code> 열어서 작성하기.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &apos;첫글&apos;   #글 제목 지정</span><br><span class="line">date:           #시간 지정</span><br><span class="line">tags:           #태그 지정</span><br><span class="line">categories:     #카테고리 지정</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># Hello World</span><br><span class="line">## Hello World</span><br><span class="line">### Hello World</span><br></pre></td></tr></table></figure><ol start="3"><li><p><code>hexo g</code>명령어를 사용하여, 정적 파일 생성.</p></li><li><p><code>hexo s</code>명령어를 사용하여, 로컬 서버 구동하기.</p></li><li><p>정상적으로 글 확인을 위해, 브라우저를 통해 접속.(기본:<code>http://localhost:4000/</code>)</p><p><em>Hexo명령어</em>  (<a href="https://hexo.io/ko/docs/commands.html" target="_blank" rel="noopener">https://hexo.io/ko/docs/commands.html</a>)</p></li></ol>]]></content>
      
      <categories>
          
          <category> git </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
